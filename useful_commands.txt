# search a string
find . | xargs grep "searchstring"  2>/dev/null
find . -exec grep searchstring {} \; 2>/dev/null

# replace string 
find ./ -type f -exec sed -i -e 's/old/new/g' {} \;

# curl commands
curl -H "Content-Type: application/json" -X POST http://127.0.0.1:5000/api/users/register -d '{"username":"xyz","password":"xyz"}'
curl -X GET http://127.0.0.1:5000/api/orders

# query couchdb manually , run from bastion VM
curl -X GET http://11.50.16.140:5984/_all_dbs
curl -X GET http://11.50.16.140:5984/db_name/_all_docs
curl -X GET http://11.50.16.140:5984/db_name/_all_docs?limit=2
curl -H "Content-Type: application/json" -X POST http://11.50.16.140:5984/db_name/_find -d '{"selector": {"metadata.title": "live.let" }}'
curl -H "Content-Type: application/json" -X POST http://11.50.16.140:5984/db_name/_find -d '{"selector": {"metadata.title": "live.let" },"limit":2 }'
curl -H "Content-Type: application/json" -X POST http://11.50.16.140:5984/db_name/_find -d '{"selector": {"metadata.title": "live.let" },"limit":2 , "skip":2}'

# swagger generate
swagger-codegen generate -i openapi.yaml -l typescript-angular

# check open tcp ports
sudo netstat -tulpn
sudo ss -tulna

# access postgres db
# local instance 
sudo -u postgres psql
# remote tunneled instance
sudo -u postgres psql -p <tunnel_port_number> -h localhost

# gcloud commands
gcloud auth login
gcloud auth application-default login
gcloud auth  list
gcloud config set account yeosiowvic@airasia.com
gcloud projects list
# show current config and current project
gcloud  config list

gcloud config set project airasia-datasciencesandbox-poc
gcloud container clusters list
# connect to GKE cluster
gcloud container clusters get-credentials <cluster-name> --zone asia-southeast1 --project <proj_name>
# activate service account
gcloud auth activate-service-account  <account email> --key-file=<keyfile>.json
# list the APIs
gcloud services list

# to overcome: "Error: Could not load the default credentials"
gcloud auth application-default login
# show current project
gcloud config list core/project
# delete vpc network
gcloud compute networks delete <vpc_name>
# list addresses
gcloud  compute addresses list 
# delete global addresses
gcloud  compute addresses delete aerotrade-private-ip-address --global
# set zone
gcloud config set compute/zone NAME
# show the node pools
gcloud container node-pools list --cluster=<cluster_name> --zone=<zone>

# terraform
terraform init -reconfigure
terraform state pull > default.tfstate
terraform state push  default.tfstate
terraform plan -out=terra.plan
terraform apply "terra.plan"
# to see TF log
export TF_LOG=debug
# list state
terraform state list
# remove state using the name
terraform state rm <name>
# if terraform init get timeout, add this as workaround
export TF_REGISTRY_CLIENT_TIMEOUT=30

# helm
# create a new chart in a new directory, only run once
helm create ordermgt
# check syntax of Chart.yaml file
helm lint ./ordermgt/
# install the container image to kubernetes cluster
helm install <release_name> <folder_name>
helm install ordermgt ./ordermgt/ --namespace test
helm install ordermgt ./ordermgt/ --namespace test --set service.type=NodePort
helm install ordermgt ./ordermgt/ --namespace test --values ordermgt/values.yaml
helm ls
helm ls --namespace test
# helm delete is renamed to helm uninstall
helm delete --namespace test ordermgt
helm uninstall --namespace test ordermgt ./ordermgt
helm -n test list -aq

# one  command to delete all helm resources
helm -n <namespace> list --short | xargs -L1 helm uninstall -n <namespace>


# vpn
sudo ./openconnect --protocol=gp <ip_addr>:<port_no> -u user-name

# specify local npm modules
npm install --save ../my-local-repo

# run ts files
npx ts-node src/foo.ts

# make new group visible for user
exec sudo su -l $USER

# scann for open ports
nmap 192.168.1.0/24

# check command associated with open ports
lsof -n -i4TCP:8081

# check process associated with open ports
sudo netstat -apn -A inet | grep :8081