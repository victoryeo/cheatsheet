# search a string
find . | xargs grep "searchstring"  2>/dev/null
find . -exec grep searchstring {} \; 2>/dev/null

# replace string 
find ./ -type f -exec sed -i -e 's/old/new/g' {} \;

# to view logs of single container
docker logs -t -f <name-of-container>

# to save logs to a file
docker-compose logs -f -t >> myDockerCompose.log

# on one console
docker exec -it quorum-examples_node1_1 geth attach /qdata/dd/geth.ipc
> eth.blockNumber
# on another console
docker exec -it quorum-examples_node2_1 geth attach /qdata/dd/geth.ipc
> eth.blockNumber

# docker run command
docker run -v core.yaml:/go/src/github.com/hyperledger/fabric/peer/core.yaml -it hyperledger/fabric-peer:2.2 /bin/sh

# check open tcp ports
sudo netstat -tulpn

# gcloud commands
gcloud auth login
gcloud auth application-default login
gcloud auth  list
gcloud config set account yeosiowvic@airasia.com
gcloud projects list
gcloud config set project airasia-datasciencesandbox-poc
gcloud container clusters list
# connect to GKE cluster
gcloud container clusters get-credentials <cluster-name> --zone asia-southeast1 --project <proj_name>
# activate service account
gcloud auth activate-service-account  <account email> --key-file=<keyfile>.json
# list the APIs
gcloud services list
gcloud auth application-default login
# show current project
gcloud config list core/project
# delete vpc network
gcloud compute networks delete <vpc_name>
# list addresses
gcloud  compute addresses list 
# delete global addresses
gcloud  compute addresses delete aerotrade-private-ip-address --global

# curl commands
curl -H "Content-Type: application/json" -X POST http://127.0.0.1:5000/api/users/register -d '{"username":"xyz","password":"xyz"}'
curl -X GET http://127.0.0.1:5000/api/orders

# query couchdb manually , run from bastion VM
curl -X GET http://11.50.16.140:5984/_all_dbs
curl -X GET http://11.50.16.140:5984/db_name/_all_docs
curl -X GET http://11.50.16.140:5984/db_name/_all_docs?limit=2
curl -H "Content-Type: application/json" -X POST http://11.50.16.140:5984/db_name/_find -d '{"selector": {"metadata.title": "live.let" }}'
curl -H "Content-Type: application/json" -X POST http://11.50.16.140:5984/db_name/_find -d '{"selector": {"metadata.title": "live.let" },"limit":2 }'
curl -H "Content-Type: application/json" -X POST http://11.50.16.140:5984/db_name/_find -d '{"selector": {"metadata.title": "live.let" },"limit":2 , "skip":2}'

# swagger generate
swagger-codegen generate -i openapi.yaml -l typescript-angular

# all open ports
sudo netstat -tulpn

# access postgres db
# local instance 
sudo -u postgres psql
# remote tunneled instance
sudo -u postgres psql -p <tunnel_port_number> -h localhost

# terraform
terraform init -reconfigure
terraform state pull > default.tfstate
terraform state push  default.tfstate
terraform plan -out=terra.plan
terraform apply "terra.plan"
# to see TF log
export TF_LOG=debug
# list state
terraform state list
# remove state using the name
terraform state rm <name>
