# deploy container to k8s pod
kubectl create deployment <deployment_name> --image=<container> -n <namespace>
kubectl create deployment bqdinator --image=asia.gcr.io/mycompany-blockchain-stg/bqdinator:latest -n myproject

# delete a deployment
kubectl delete deployment <deployment_name> -n <namespace>

# show list of ingress
kubectl -n <namespace> get ingress
kubectl -n <namespace> get ing 
# show specific ingress details
kubectl -n <namespace> describe ingress <ingress_name>
kubectl -n <namespace> describe ing <ingress_name>  
# describe ingress routes
kubectl -n <namespace> describe ingress besu-ingress-routes

# apply k8s ingress yaml file
kubectl apply -f <k8s_yaml>.yml

# see logs
kubectl get pods -n gitlab-managed-apps
kubectl logs install-helm -n gitlab-managed-apps

# see events
kubectl get events --sort-by=.metadata.creationTimestamp -n bc

# create a pod
kubectl -n bc create -f ./config-example.yaml

# delete a pod
kubectl -n bc delete -f ./config-example.yaml

# show list of GKE contexts
kubectl config get-contexts

# show current cluster
kubectl config current-context

# select local cluster
kubectl config use-context minikube

# to connect to a pod command line
kubectl exec nginx-f89759699-2gbwc  -it -- bash
# connect to container in pod
kubectl -n <namespace> exec <pod> --container <container_name> -it -- bash

# live log
kubectl -n bc logs peer0-ade-hlf-peer-797894965c-cvrxd --tail 1 --follow

# scale deployment replicas
kubectl scale deployment <name> --replicas=10

# describe pod (to find pod's external ip address)
kubectl -n <namespace> describe pod <podname>

# get namespace
kubectl get namespace

# delete a pod
kubectl delete pod  <pod_name>  -n <namespace>

# get service
kubectl get svc -n <namespace>
kubectl get service -n <namespace>
kubectl get service -n <namespace> -o wide
